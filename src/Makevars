PKG_CPPFLAGS = -I../inst/include -I./llama -I./ggml -I./ggml/ggml-cpu -DUSING_R=1 -DGGML_BUILD_FOR_R
PKG_CXXFLAGS = -DNDEBUG -DGGML_USE_CPU
PKG_CFLAGS = -DNDEBUG -DGGML_USE_CPU

# General flags to improve compatibility with various compiler versions
# Note: Avoid non-portable warning suppression flags for CRAN compliance

# Cross-platform configuration without OpenMP for stability
GGML_CXXFLAGS = $(PKG_CXXFLAGS) -fPIC
GGML_CFLAGS = $(PKG_CFLAGS) -DUSING_R=1 -fPIC
PKG_LIBS = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)

# Platform-specific compiler flags
ifeq ($(UNAME_S),Darwin)
# macOS specific flags to handle potential issues
GGML_CXXFLAGS += -Wno-unused-command-line-argument -Wno-unknown-pragmas
GGML_CFLAGS += -Wno-unused-command-line-argument -Wno-unknown-pragmas
endif

# Check for Fedora/RedHat (common issues with newer GCC versions)
# Only add GCC-specific warnings when using GCC (not clang)
ifneq ($(wildcard /etc/fedora-release /etc/redhat-release),)
CXX_IS_CLANG := $(shell $(CXX) --version 2>/dev/null | grep -i clang)
ifeq ($(CXX_IS_CLANG),)
# GCC-specific flags for newer GCC versions
GGML_CXXFLAGS += -Wno-stringop-overflow -Wno-array-bounds -Wno-maybe-uninitialized
GGML_CFLAGS += -Wno-stringop-overflow -Wno-array-bounds -Wno-maybe-uninitialized
endif
endif

# Core object files (common to all architectures)
CORE_OBJECTS = bindings.o RcppExports.o \
	ggml/ggml.o ggml/ggml-alloc.o ggml/gguf.o \
	ggml/ggml-backend.o ggml/ggml-backend-reg.o \
	ggml/ggml-quants.o ggml/ggml-threading.o ggml/ggml-opt.o \
	llama/llama-adapter.o llama/llama-arch.o llama/llama-batch.o llama/llama-chat.o \
	llama/llama-context.o llama/llama-cparams.o llama/llama-grammar.o llama/llama-graph.o \
	llama/llama-hparams.o llama/llama-impl.o llama/llama-io.o llama/llama-kv-cache-iswa.o \
	llama/llama-kv-cache.o llama/llama-memory-hybrid.o llama/llama-memory-recurrent.o \
	llama/llama-memory.o llama/llama-mmap.o llama/llama-model-loader.o llama/llama-model-saver.o llama/llama-model.o \
	llama/llama-quant.o llama/llama-sampling.o llama/llama-vocab.o llama/llama.o \
	llama/unicode-data.o llama/unicode.o \
	ggml/ggml-cpu/ggml-cpu-c.o ggml/ggml-cpu/ggml-cpu-cpp.o ggml/ggml-cpu/ops.o \
	ggml/ggml-cpu/binary-ops.o ggml/ggml-cpu/unary-ops.o ggml/ggml-cpu/vec.o \
	ggml/ggml-cpu/traits.o ggml/ggml-cpu/repack.o ggml/ggml-cpu/quants.o

# Architecture-specific objects - only include x86 objects on x86 platforms
ARCH_OBJECTS_x86_64 = ggml/ggml-cpu/arch/x86/quants.o ggml/ggml-cpu/arch/x86/repack.o ggml/ggml-cpu/arch/x86/cpu-feats.o

# Detect architecture and set appropriate objects
# More robust architecture detection for cross-platform compatibility
UNAME_M := $(shell uname -m 2>/dev/null || echo "unknown")
UNAME_S := $(shell uname -s 2>/dev/null || echo "unknown")

# Check if we're on an x86-compatible architecture
ifeq ($(filter $(UNAME_M),x86_64 amd64 i386 i686),$(UNAME_M))
# x86-compatible architecture - include optimized objects if they exist
ifneq ($(wildcard ggml/ggml-cpu/arch/x86/*.c ggml/ggml-cpu/arch/x86/*.cpp),)
ARCH_OBJECTS = $(ARCH_OBJECTS_x86_64)
else
# x86 arch files not available, use generic fallback
ARCH_OBJECTS =
GGML_CXXFLAGS += -DGGML_CPU_GENERIC
GGML_CFLAGS += -DGGML_CPU_GENERIC
endif
else
# Non-x86 architectures (ARM64, Apple Silicon, etc.)
ARCH_OBJECTS =
GGML_CXXFLAGS += -DGGML_CPU_GENERIC
GGML_CFLAGS += -DGGML_CPU_GENERIC

# Apple Silicon specific optimizations
# Use -mtune instead of -mcpu for CRAN compliance
ifeq ($(UNAME_S),Darwin)
ifeq ($(filter $(UNAME_M),arm64 aarch64),$(UNAME_M))
GGML_CXXFLAGS += -mtune=native
GGML_CFLAGS += -mtune=native
endif
endif
endif

# Complete objects list with architecture support
OBJECTS = $(CORE_OBJECTS) $(ARCH_OBJECTS)

all: $(SHLIB)

clean:
	rm -f $(OBJECTS) $(SHLIB)

# Special rules for conflicting ggml-cpu files
ggml/ggml-cpu/ggml-cpu-c.o: ggml/ggml-cpu/ggml-cpu.c
	$(CC) $(ALL_CPPFLAGS) $(GGML_CFLAGS) -c $< -o $@

ggml/ggml-cpu/ggml-cpu-cpp.o: ggml/ggml-cpu/ggml-cpu.cpp
	$(CXX) $(ALL_CPPFLAGS) $(GGML_CXXFLAGS) -c $< -o $@

# Standard compilation rules for main source files
bindings.o: bindings.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -fPIC -c $< -o $@

RcppExports.o: RcppExports.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -fPIC -c $< -o $@

# Special rules for GGML/LLAMA files
ggml/%.o: ggml/%.c
	$(CC) $(ALL_CPPFLAGS) $(GGML_CFLAGS) -c $< -o $@

ggml/%.o: ggml/%.cpp
	$(CXX) $(ALL_CPPFLAGS) $(GGML_CXXFLAGS) -c $< -o $@

llama/%.o: llama/%.cpp
	$(CXX) $(ALL_CPPFLAGS) $(GGML_CXXFLAGS) -c $< -o $@

# Architecture-specific rules (only for x86 platforms)
ifneq ($(ARCH_OBJECTS),)
ggml/ggml-cpu/arch/x86/%.o: ggml/ggml-cpu/arch/x86/%.c
	$(CC) $(ALL_CPPFLAGS) $(GGML_CFLAGS) -c $< -o $@

ggml/ggml-cpu/arch/x86/%.o: ggml/ggml-cpu/arch/x86/%.cpp
	$(CXX) $(ALL_CPPFLAGS) $(GGML_CXXFLAGS) -c $< -o $@
endif

# Standard fallback rules
%.o: %.c
	$(CC) $(ALL_CPPFLAGS) $(ALL_CFLAGS) -fPIC -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -fPIC -c $< -o $@